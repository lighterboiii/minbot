require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const axios = require("axios");
const RSSParser = require("rss-parser");
const rssParser = new RSSParser();

const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

const phrases = [
  "–ß—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ –Ω–µ—Å—ë—à—å?",
  "–¢—ã –≤ —Å–≤–æ—ë–º —É–º–µ?",
  "–ú–µ—Å–∫–∞–ª–∏–∫–æ–º –µ—â–µ –∑–∞–∫—Ä–µ–ø–∏–ª",
  "–ß—Ç–æ –¥–∞ –¥–∞ –ú–∏–Ω–∞–π",
  "–ü—Ä–µ–¥–ª–∞–≥–∞—é –î–∏–º–∞–Ω—É —Å–º–∞—á–Ω–æ –ø–æ–π—Ç–∏ –Ω–∞—Ö—É–π",
  "–ß–µ —Ä–∞—Å–ø–∏–∑–¥–µ–ª–∏—Å—å –¥—Ä—É–≥–∞–Ω—ã",
  "–í—ã –∏ —â–∞—Å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∏ –±—Ä–∞—Ç–≤–∞",
  "–î–∞–π –≥–∞–∑—É, –±—Ä–∞—Ç–µ—Ü",
  "–ü–æ—Å–ª–µ —Ç–µ–∫–∏–ª—ã –≥–æ–ª–æ–≤–∞ –≥–æ–≤—è–∂—å—è",
  "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –Ω–∞ –ø–∏–≤–∫–æ –≤–Ω–µ—Å–ª–∏",
  "–©–∞—Å –ø–∏–≤—É –¥–∞–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–µ–Ω—å —Ç—è–∂–µ–ª—ã–π",
  '–±—Ä–∞—Ç–∏–∫ –Ω—É —á—Ç–æ —Ç—ã?',
  "–ê–Ω–¥—Ä–µ–π –ú–∏–Ω–∞–µ–≤",
  "–ï–≥–∏–ø–µ—Ç—Å–∫–∞—è —Å–∏–ª–∞ –º–æ–∂–µ—Ç —Ç–æ–∂–µ –¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è",
  "–°–µ–∫—Å",
  "–í–µ—Ä–∏ –≥—É–¥",
  "–î–∂–∞–±–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ–π –≤—ã—Ä—É–±–ª—é. –ï–±–∞—Ç—å –∞—Ö—É–µ–µ–º",
  "–Ω–∞–ø—Ä–æ—Ç–∏–≤ –∑–∞–º–∫–∞ –ø–∏–≤–æ —Å–∏–¥–µ–ª –ø–∏–ª –≤ –ø—è—Ç–Ω–∏—Ü—É",
  "–û–ü–ê –≤ –ø—è—Ç–Ω–∏—Ü—É —Ç–æ–∂–µ –±—É—Ö–∞—Ç—å –ø–æ–π–¥—É",
  "–î–∞ —Ç—è–∂–∫–æ",
  "–ù–µ –Ω—É",
  "–ü–∏–≤–∞—Å–∏–∫–æ–º —Ä–∞–∑—Ä–∞–≤–Ω—è—Ç—å—Å—è",
  "–ë–∞—Ç—Ä–∞—á–∫–∞",
  "–ù–∞ –≥–∞–ª–µ—Ä–µ —á—Ç–æ –ª–∏?",
  "–•—É–π –∑–Ω–∞–µ—Ç, –±—Ä–∞—Ç–µ—Ü",
  "–í–∞–π –±–∞–ª—è",
  "–í—ã —á—Ç–æ –∞—Ö—É–µ–ª–∏?",
  "–ù–ï–¢ –í–û–ô–ù–ï",
  "–†–∞–±–æ—Ç–∞–π—Ç–µ –±—Ä–∞—Ç—å—è",
  "–ù–∞—à–µ–ª –±–∞—Ä –≤ –°–ü–± –≥–¥–µ –∫—É—Ä–∏—Ç—å –º–æ–∂–Ω–æ –≤–Ω—É—Ç—Ä–∏",
  "–±—Ä–∞–∞—Ç–∏–∫",
  "–ß—É—Ä–∫–∞ –±–ª—è",
  "–û–ø–∞ –Ω–∏—Ö—É—è",
  "–ù—É –¥–∞–≤–∞–π –¥–∞–≤–∞–π –Ω–∞–ø–∞–¥–∞–π",
  "–°–∫–∏–Ω—å—Ç–µ –°–ª–∞–≤–µ —Ç—ã—Å—è—á—É –Ω–∞ —Ç–∏–Ω—å–∫–æ—Ñ—Ñ",
  "–í–∞—Å—è –∫—Ä—É—Ç–æ–π —á–µ–ª",
  "–ü–æ—à–µ–ª –¥–∏–º–∞—Å–∏–∫ –Ω–∞—Ö—É–π",
  "–î–æ–ª–±–∞–µ–±",
  "–ú–æ–∂–µ—Ç –∏–∑ —Ç–µ–±—è –∫–æ–∫–ª–µ—Ç—ã –ø–æ—Å—ã–ø—è—Ç—Å—è –±–æ—Ä–∑–µ–Ω–∫–æ–≤",
  "–û–±–µ–¥–∞—Ç—å –±—É–¥–µ–º",
  "–î–∏—Ä—è–±—á–∏–∫",
];

let botId = null;

// –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
bot.getMe().then((me) => {
  botId = me.id;
  console.log("Bot ID:", botId);
});

// –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, —è –ú–∏–Ω–±–æ—Ç! –Ø –º–æ–≥—É –Ω–µ —Ç–æ–ª—å–∫–æ —à—É—Ç–∏—Ç—å, –Ω–æ –∏ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

/weather ‚Äî –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ –∏ –ú—Ü–µ–Ω—Å–∫–µ
/currency ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É –∏ —é–∞–Ω—é
/news ‚Äî –ø—Ä–∏—à–ª—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏

–¢–∞–∫–∂–µ –º–æ–≥—É –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!`
  );
});

// –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  console.log(msg);

  // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ /start
  if (msg.text && msg.text.startsWith("/") && !msg.text.startsWith("/start"))
    return;

  // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
  if (msg.reply_to_message && botId && msg.reply_to_message.from.id === botId) {
    const userText = msg.text || "";
    const answer = `–±—Ä–∞—Ç–∏–∫ —á—Ç–æ —Ç–∞–∫–æ–µ "${userText}"`;
    bot.sendMessage(chatId, answer, { reply_to_message_id: msg.message_id });
    return;
  }

  // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5% –æ—Ç–≤–µ—á–∞–µ–º
  if (Math.random() < 0.08) {
    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20% –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
    if (Math.random() < 0.2) {
      const randomSticker =
        stickerIds[Math.floor(Math.random() * stickerIds.length)];
      bot.sendSticker(chatId, randomSticker);
    } else {
      const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
      bot.sendMessage(chatId, randomPhrase);
    }
  }
});

bot.on("channel_post", (msg) => {
  const chatId = msg.chat.id;
  if (Math.random() < 0.034) {
    const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
    bot.sendMessage(chatId, randomPhrase);
  }
});

// --- –ü–æ–≥–æ–¥–∞ ---
bot.onText(/\/weather/, async (msg) => {
  const chatId = msg.chat.id;
  const apiKey = process.env.OWM_API_KEY || "9a4c8c4dbacfadf76b6128331b053eaa";
  const cities = [
    { name: "–ú–æ—Å–∫–≤–∞", query: "Moscow.ru" },
    { name: "–ú—Ü–µ–Ω—Å–∫", query: "Mtsensk.ru" },
  ];
  let reply = "";
  for (const city of cities) {
    try {
      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city.query}&appid=${apiKey}&units=metric&lang=ru`;
      const res = await axios.get(url);
      const w = res.data;
      reply += `üå§ <b>${city.name}</b>: ${w.weather[0].description}, ${w.main.temp}¬∞C\n`;
    } catch (e) {
      if (e.response) {
        console.log("OpenWeatherMap error:", e.response.data);
        reply += `–û—à–∏–±–∫–∞: ${e.response.data.message} –¥–ª—è ${city.name}\n`;
      } else {
        console.log("OpenWeatherMap error:", e);
        reply += `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è ${city.name}\n`;
      }
    }
  }
  bot.sendMessage(chatId, reply, { parse_mode: "HTML" });
});

// --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
bot.onText(/\/currency/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const res = await axios.get(
      "https://api.exchangerate.host/latest?base=RUB&symbols=USD,CNY"
    );
    const rates = res.data.rates;
    const usd = (1 / rates.USD).toFixed(2);
    const cny = (1 / rates.CNY).toFixed(2);
    const reply = `üíµ 1 USD = ${rates.USD.toFixed(
      2
    )} RUB\nüí¥ 1 CNY = ${rates.CNY.toFixed(
      2
    )} RUB\n\n1 RUB = ${usd} USD\n1 RUB = ${cny} CNY`;
    bot.sendMessage(chatId, reply);
  } catch (e) {
    bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.");
  }
});

// --- –ù–æ–≤–æ—Å—Ç–∏ ---
bot.onText(/\/news/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const feed = await rssParser.parseURL("https://meduza.io/rss2/all");
    const news = feed.items
      .slice(0, 5)
      .map((item) => `‚Ä¢ <a href=\"${item.link}\">${item.title}</a>`)
      .join("\n");
    bot.sendMessage(chatId, `<b>–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ Meduza:</b>\n${news}`, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
  } catch (e) {
    bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.");
  }
});

// --- –û–ø—Ä–æ—Å—ã ---
const pollQuestions = [
  {
    question: "–ö—Ç–æ –Ω–∞ –≥–∞–ª–µ—Ä–µ —Å–µ–≥–æ–¥–Ω—è?",
    options: ["–Ø –Ω–∞ –≥–∞–ª–µ—Ä–µ", "–Ø –ø–∏–≤–æ –ø—å—é", "–ë–∞—Ç—Ä–∞—á–∫–∞!", "–ê —á—Ç–æ –∑–∞ –≥–∞–ª–µ—Ä–∞?"],
  },
  {
    question: "–ö—Ç–æ –ø–æ –º–µ—Å–∫–∞–ª–∏–∫—É –±—ã –¥–∞–ª?",
    options: ["–Ø –±—ã –¥–∞–ª!", "–Ø –ø–∞—Å", "–¢–æ–ª—å–∫–æ –ø–∏–≤–∫–æ", "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Å–∫–∞–ª–∏–∫?"],
  },
  {
    question: "–ü–∏–≤–∫–æ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç?",
    options: ["–ë—É–¥–µ—Ç", "–ù–µ—Ç", "–Ø –∑–∞ —Ä—É–ª—ë–º —Å —á–∞—Å–∞–º–∏", "–¢—è–∂–∫–æ"],
  },
  {
    question: "–ö—Ç–æ –∑–∞ –ø–∏–≤–∫–æ –Ω–∞ –≥–∞–ª–µ—Ä–µ?",
    options: ["–Ø –∑–∞!", "–ë—É—Ç—ã–ª–æ—á–∫—É –±—ã –≤–æ–¥–æ—á–∫–∏", "–¢–æ–ª—å–∫–æ –º–µ—Å–∫–∞–ª–∏–∫", "–û–π —Ç—è–∂–∫–æ –±—Ä–∞—Ç–µ—Ü"],
  },
  {
    question: "–ú–µ—Å–∫–∞–ª–∏–∫–∞ –±—ã —â–∞?",
    options: ["–î–∞!", "–ù–µ—Ç", "–õ—É—á—à–µ –ø–∏–≤–∫–∞ –¥–≤–∞ –∞ —Ç–æ –∏ —Ç—Ä–∏", "—è –Ω–∞ –≥–∞–ª–µ—Ä–µ –±—Ä–∞—Ç"],
  },
];

const schedule = require('node-schedule');
let pollJobs = [];

function getRandomTimePair() {
  // –ü–æ–ª—É—á–∏—Ç—å –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–∂–¥—É 10:00 –∏ 23:00)
  function randomHour(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function randomMinute() {
    return Math.floor(Math.random() * 60);
  }
  let firstHour = randomHour(10, 18);
  let secondHour = randomHour(19, 22);
  return [
    { hour: firstHour, minute: randomMinute() },
    { hour: secondHour, minute: randomMinute() },
  ];
}

function sendRandomPoll() {
  const poll = pollQuestions[Math.floor(Math.random() * pollQuestions.length)];
  bot.sendPoll(
    CHANNEL_CHAT_ID,
    poll.question,
    poll.options,
    { is_anonymous: false }
  );
}

function schedulePollsForToday() {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
  pollJobs.forEach((job) => job.cancel());
  pollJobs = [];
  const times = getRandomTimePair();
  times.forEach((t) => {
    const job = schedule.scheduleJob({ hour: t.hour, minute: t.minute }, sendRandomPoll);
    pollJobs.push(job);
  });
}

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–æ—Å—ã
schedule.scheduleJob({ hour: 0, minute: 0 }, schedulePollsForToday);
// –ò —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
schedulePollsForToday();

const CHANNEL_CHAT_ID = process.env.CHANNEL_CHAT_ID || "YOUR_CHANNEL_CHAT_ID";

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 —É—Ç—Ä–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
cron.schedule("0 8 * * *", () => {
  bot.sendMessage(CHANNEL_CHAT_ID, "–ó–¥–∞—Ä–æ–≤–∞, –ú—É–∂–∏–∫–∏");
});

const periodicPhrases = [
  "–ß–µ –ø—Ä–∏—Ç–∏—Ö–ª–∏ –±—Ä–∞—Ç—É–ª—å—Ü—ã?",
  "–ê–ª–µ –∞–º–∏–≥–æ—Å—ã",
  "–ú—É—á–∞—á–µ—Å",
  "–ú–µ—Å–∫–∞–ª–∏–∫–∞ –±—ã —â–∞",
];

// –ö–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
cron.schedule("*/37 * * * *", () => {
  const randomPhrase =
    periodicPhrases[Math.floor(Math.random() * periodicPhrases.length)];
  if (Math.random() < 0.4) {
    bot.sendMessage(CHANNEL_CHAT_ID, randomPhrase);
  }
});

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00
cron.schedule("0 22 * * *", () => {
  bot.sendMessage(CHANNEL_CHAT_ID, "–°–ø–∞—Ç—å –ø–æ—Ä–∞ –º—É–∂–∏–∫–∏");
});

// file_id —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
const stickerIds = [
  "CAACAgIAAx0CZ5pVEwABCxYGaHaf8E8XAAHKIvFhQAaxt6BK0J9OAAKCAAPHwsIgyP97roQJ6W42BA",
  "CAACAgIAAx0CZ5pVEwABCxYIaHagSuWH8X0JFUTyZRQdEjmmGbAAAlMAA8fCwiDYYvwqMZKy1zYE",
  "CAACAgIAAxkBAAN-aHafo8ofwR5wz0SPOncnioGzt4gAAv1RAALITHFKuuMcV_EejH82BA",
  "CAACAgIAAx0CZ5pVEwABCxYLaHagiRak11JEiKYlFPxd77IiOf4AAg0XAAKS9vBJ9xaUt_eoMbE2BA",
  "CAACAgQAAx0CZ5pVEwABCxYMaHagl0tlUTOYj1YnSyzLNHlRZH8AAlEPAAKm8XEedZ60Jhfak4Y2BA",
  "CAACAgIAAx0CZ5pVEwABCxYNaHagpPTPyZgWZv4Uv7k-NH3Jn_4AAgxzAAKCXilJn_2bl3zaByI2BA",
  "CAACAgIAAx0CZ5pVEwABCxYOaHags4PC08Oi6ymOgCpdxDIYLEMAAtU8AAIvL0BJuqeOrjC2PSM2BA",
  "CAACAgIAAx0CZ5pVEwABCxYPaHagvLy5H7GcvzBwhx4IaBspmrYAAn9OAAKA64FJMSMTsTA7pY82BA",
  "CAACAgIAAx0CZ5pVEwABCxc5aHdPZ0eSDV3IwFFj1rqLk4au8rAAApEAA4wS6xvXv4cXJyxP3jYE",
];
