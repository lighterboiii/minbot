require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const axios = require("axios");
const RSSParser = require("rss-parser");
const rssParser = new RSSParser();
const fs = require('fs');
const PHOTOS_FILE = 'photos.json';
const STICKERS_JSON = 'stickers.json';

const token = process.env.BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });

const phrases = require('./phrases');
const photoCaptions = require('./photoCaptions');
const pollQuestions = require('./pollQuestions');
const stickerIds = require('./stickerIds');
const periodicPhrases = require('./periodicPhrases');
const emojis = require('./emojis');
const insults = require('./insults');

const SLAVA_ID = 653015244;
const slavaTriggers = ["—Å–ª–∞–≤–∞", "—Å–ª–∞–≤–∏–∫"];

let botId = null;
let botUsername = null;

// –ü–æ–ª—É—á–∞–µ–º ID –∏ username –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
bot.getMe().then((me) => {
  botId = me.id;
  botUsername = me.username;
  console.log("Bot ID:", botId);
  console.log("Bot username:", botUsername);
});

// –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, —è –ú–∏–Ω–±–æ—Ç! –Ø –º–æ–≥—É –Ω–µ —Ç–æ–ª—å–∫–æ —à—É—Ç–∏—Ç—å, –Ω–æ –∏ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

/weather ‚Äî –ø–æ–∫–∞–∂—É –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ, –ú—Ü–µ–Ω—Å–∫–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
/currency ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É –∏ —é–∞–Ω—é
/news ‚Äî –ø—Ä–∏—à–ª—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/photo ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–æ—Ç–∫—É –∏–∑ —á–∞—Ç–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º

–ò–Ω–æ–≥–¥–∞ —Å–æ–∑–¥–∞—é –æ–ø—Ä–æ—Å—ã.

–¢–∞–∫–∂–µ –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!`
  );
});

// –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const lowerCaseText = (msg.text || "").toLowerCase();

  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –°–ª–∞–≤—É
  if (msg.from.id === SLAVA_ID && slavaTriggers.some(trigger => lowerCaseText.includes(trigger))) {
    const randomInsult = insults[Math.floor(Math.random() * insults.length)];
    bot.sendMessage(chatId, randomInsult, { reply_to_message_id: msg.message_id });
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π —Ñ–æ—Ç–∫–∏
  if (msg.photo && Array.isArray(msg.photo) && msg.photo.length > 0) {
    const largest = msg.photo[msg.photo.length - 1];
    savePhotoId(largest.file_id);
  }

  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @username (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –Ω–µ return)
  if (
    msg.text &&
    botUsername &&
    msg.text.toLowerCase().includes("@" + botUsername.toLowerCase())
  ) {
    let userText = msg.text
      .replace(new RegExp("@" + botUsername, "ig"), "")
      .trim();
    const answer = `–°–∞–º —Ç—ã ${userText} –±—Ä–∞—Ç–∏–∫`;
    bot.sendMessage(chatId, answer, { reply_to_message_id: msg.message_id });
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ /start
  if (msg.text && msg.text.startsWith("/") && !msg.text.startsWith("/start"))
    return;

  // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
  if (msg.reply_to_message && botId && msg.reply_to_message.from.id === botId) {
    if (msg.text) {
      const userText = msg.text;
      const answer = `–ë—Ä–∞—Ç–∏–∫ ${userText} –Ω–µ –∑–Ω–∞—é. –ú–æ–∂–µ—Ç –ª—É—á—à–µ —Ä–∞–∑—Ä–∞–≤–Ω—è–µ–º—Å—è?`;
      bot.sendMessage(chatId, answer, { reply_to_message_id: msg.message_id });
    } else if (msg.sticker) {
      const answer = `–ë—Ä–∞—Ç–∏–∫, —Ç—ã –º–Ω–µ —Å—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª? –ú–æ–∂–µ—Ç –ª—É—á—à–µ –¥–µ–Ω—å–≥–∏ –°–ª–∞–≤–µ —Å–∫–∏–Ω–µ—à—å –Ω–∞ –ø–∏–≤–∫–æ?`;
      bot.sendMessage(chatId, answer, { reply_to_message_id: msg.message_id });
    }
    return;
  }

  // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5% –æ—Ç–≤–µ—á–∞–µ–º
  if (Math.random() < 0.08) {
    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20% –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
    if (Math.random() < 0.2) {
      const randomSticker =
        stickerIds[Math.floor(Math.random() * stickerIds.length)];
      bot.sendSticker(chatId, randomSticker);
    } else {
      const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
      bot.sendMessage(chatId, randomPhrase);
    }
  }

  // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 5% –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏-—Ä–µ–∞–∫—Ü–∏—é
  if (Math.random() < 0.14) {
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
    bot.sendMessage(msg.chat.id, randomEmoji, { reply_to_message_id: msg.message_id });
  }
});
// –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
// bot.on("channel_post", (msg) => {
//   const chatId = msg.chat.id;
//   if (Math.random() < 0.034) {
//     const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
//     bot.sendMessage(chatId, randomPhrase);
//   }
// });

// --- –ü–æ–≥–æ–¥–∞ ---
bot.onText(/\/weather/, async (msg) => {
  const chatId = msg.chat.id;
  const apiKey = process.env.OWM_API_KEY || "";
  const cities = [
    { name: "–ú–æ—Å–∫–≤–∞", query: "Moscow" },
    { name: "–ú—Ü–µ–Ω—Å–∫", query: "Mtsensk" },
    { name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", query: "Saint Petersburg" },
  ];
  let reply = "";
  for (const city of cities) {
    try {
      const url = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city.query}&lang=ru`;
      const res = await axios.get(url);
      const w = res.data;
      reply += `üå§ <b>${city.name}</b>: ${w.current.condition.text}, ${w.current.temp_c}¬∞C\n`;
    } catch (e) {
      if (e.response && e.response.data && e.response.data.error) {
        reply += `–û—à–∏–±–∫–∞: ${e.response.data.error.message} –¥–ª—è ${city.name}\n`;
      } else {
        reply += `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è ${city.name}\n`;
      }
    }
  }
  bot.sendMessage(chatId, reply, { parse_mode: "HTML" });
});

// --- –ö—É—Ä—Å –≤–∞–ª—é—Ç ---
bot.onText(/\/currency/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã EUR‚ÜíRUB, EUR‚ÜíUSD, EUR‚ÜíCNY
    const res = await axios.get(
      "https://api.frankfurter.app/latest?from=EUR&to=RUB,USD,CNY"
    );
    const rates = res.data.rates;
    // –ö—Ä–æ—Å—Å-–∫—É—Ä—Å: 1 USD = (RUB per EUR) / (USD per EUR)
    const usd = (rates.RUB / rates.USD).toFixed(2);
    const eur = rates.RUB.toFixed(2);
    const cny = (rates.RUB / rates.CNY).toFixed(2);
    const reply = `üíµ 1 USD = ${usd} RUB\nüí∂ 1 EUR = ${eur} RUB\nüí¥ 1 CNY = ${cny} RUB`;
    bot.sendMessage(chatId, reply);
  } catch (e) {
    bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.");
  }
});

// --- –ù–æ–≤–æ—Å—Ç–∏ ---
bot.onText(/\/news/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const feed = await rssParser.parseURL("https://meduza.io/rss2/all");
    const news = feed.items
      .slice(0, 5)
      .map((item) => `‚Ä¢ <a href=\"${item.link}\">${item.title}</a>`)
      .join("\n");
    bot.sendMessage(chatId, `<b>–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å, –±—Ä–∞—Ç–∏–∫–∏:</b>\n${news}`, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
  } catch (e) {
    bot.sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.");
  }
});

// --- –û–ø—Ä–æ—Å—ã ---
const schedule = require("node-schedule");
let pollJobs = [];

function getRandomTimePair() {
  // –ü–æ–ª—É—á–∏—Ç—å –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–∂–¥—É 10:00 –∏ 23:00)
  function randomHour(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  function randomMinute() {
    return Math.floor(Math.random() * 60);
  }
  let firstHour = randomHour(10, 18);
  let secondHour = randomHour(19, 22);
  return [
    { hour: firstHour, minute: randomMinute() },
    { hour: secondHour, minute: randomMinute() },
  ];
}

function sendRandomPoll() {
  const poll = pollQuestions[Math.floor(Math.random() * pollQuestions.length)];
  bot.sendPoll(CHANNEL_CHAT_ID, poll.question, poll.options, {
    is_anonymous: false,
  });
}

function schedulePollsForToday() {
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
  pollJobs.forEach((job) => job.cancel());
  pollJobs = [];
  const times = getRandomTimePair();
  times.forEach((t) => {
    const job = schedule.scheduleJob(
      { hour: t.hour, minute: t.minute },
      sendRandomPoll
    );
    pollJobs.push(job);
  });
}

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–æ—Å—ã
schedule.scheduleJob({ hour: 0, minute: 0 }, schedulePollsForToday);
// –ò —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
schedulePollsForToday();

const CHANNEL_CHAT_ID = process.env.CHANNEL_CHAT_ID || "YOUR_CHANNEL_CHAT_ID";

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 —É—Ç—Ä–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
cron.schedule("0 7 * * *", async () => {
  bot.sendMessage(CHANNEL_CHAT_ID, "–ó–¥–∞—Ä–æ–≤–∞, –ú—É–∂–∏–∫–∏");
  // –ü–æ–≥–æ–¥–∞ —É—Ç—Ä–æ–º
  const apiKey = process.env.OWM_API_KEY || "";
  const cities = [
    { name: "–ú–æ—Å–∫–≤–∞", query: "Moscow" },
    { name: "–ú—Ü–µ–Ω—Å–∫", query: "Mtsensk" },
    { name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", query: "Saint Petersburg" },
  ];
  let reply = "–ü–æ–≥–æ–¥–∫–∞ –Ω—ã–Ω—á–µ —Ç–∞–∫–∞—è —É –Ω–∞—Å";
  for (const city of cities) {
    try {
      const url = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city.query}&lang=ru`;
      const res = await axios.get(url);
      const w = res.data;
      reply += `üå§ <b>${city.name}</b>: ${w.current.condition.text}, ${w.current.temp_c}¬∞C\n`;
    } catch (e) {
      if (e.response && e.response.data && e.response.data.error) {
        reply += `–û—à–∏–±–∫–∞: ${e.response.data.error.message} –¥–ª—è ${city.name}\n`;
      } else {
        reply += `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è ${city.name}\n`;
      }
    }
  }
  bot.sendMessage(CHANNEL_CHAT_ID, reply, { parse_mode: "HTML" });
});

cron.schedule("*/37 * * * *", () => {
  const randomPhrase =
    periodicPhrases[Math.floor(Math.random() * periodicPhrases.length)];
  if (Math.random() < 0.4) {
    bot.sendMessage(CHANNEL_CHAT_ID, randomPhrase);
  }
});

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00
cron.schedule("0 22 * * *", () => {
  bot.sendMessage(CHANNEL_CHAT_ID, "–°–ø–∞—Ç—å –ø–æ—Ä–∞ –º—É–∂–∏–∫–∏");
});

const sendRandomNews = async () => {
  try {
    const feed = await rssParser.parseURL("https://meduza.io/rss2/all");
    const items = feed.items;
    if (!items || items.length === 0) return;
    const randomItem = items[Math.floor(Math.random() * items.length)];
    const news = `‚Ä¢ <a href=\"${randomItem.link}\">${randomItem.title}</a>`;
    bot.sendMessage(CHANNEL_CHAT_ID, `<b>–ü–æ—á–∏—Ç–∞–π—Ç–µ, –±—Ä–∞—Ç—Ü—ã:</b>\n${news}`, {
      parse_mode: "HTML",
      disable_web_page_preview: false,
    });
  } catch (e) {
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
  }
};

function scheduleRandomNewsCron() {
  // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (global.newsCronJob) global.newsCronJob.stop();
  // –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 2-3 —á–∞—Å–∞
  const minutes = Math.floor(Math.random() * 60) + 120; // 120-179 –º–∏–Ω—É—Ç
  global.newsCronJob = cron.schedule(`*/${minutes} * * * *`, async () => {
    await sendRandomNews();
    scheduleRandomNewsCron(); // –ü–µ—Ä–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
  });
}

scheduleRandomNewsCron();

function savePhotoId(fileId) {
  let arr = [];
  if (fs.existsSync(PHOTOS_FILE)) {
    try { arr = JSON.parse(fs.readFileSync(PHOTOS_FILE, 'utf8')); } catch {}
  }
  if (!arr.includes(fileId)) {
    arr.push(fileId);
    fs.writeFileSync(PHOTOS_FILE, JSON.stringify(arr));
  }
}

function sendRandomPhoto() {
  if (!fs.existsSync(PHOTOS_FILE)) return;
  let arr = [];
  try { arr = JSON.parse(fs.readFileSync(PHOTOS_FILE, 'utf8')); } catch {}
  if (!arr.length) return;
  const fileId = arr[Math.floor(Math.random() * arr.length)];
  const caption = photoCaptions[Math.floor(Math.random() * photoCaptions.length)];
  bot.sendPhoto(CHANNEL_CHAT_ID, fileId, { caption });
}

function scheduleRandomPhotoCron() {
  if (global.photoCronJob) global.photoCronJob.stop();
  const minutes = Math.floor(Math.random() * 60) + 480/3; // 160-219 –º–∏–Ω—É—Ç (2-3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
  global.photoCronJob = cron.schedule(`*/${Math.floor(minutes)} * * * *`, () => {
    sendRandomPhoto();
    scheduleRandomPhotoCron();
  });
}
scheduleRandomPhotoCron();

bot.onText(/\/photo/, (msg) => {
  if (!fs.existsSync(PHOTOS_FILE)) return;
  let arr = [];
  try { arr = JSON.parse(fs.readFileSync(PHOTOS_FILE, 'utf8')); } catch {}
  if (!arr.length) return;
  const fileId = arr[Math.floor(Math.random() * arr.length)];
  const caption = photoCaptions[Math.floor(Math.random() * photoCaptions.length)];
  bot.sendPhoto(msg.chat.id, fileId, { caption });
});


